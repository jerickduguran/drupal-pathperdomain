<?php

/**
 * @file
 *  Path alias handling for multiple domains.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\pathperdomain\Plugin\Menu\ViewTab; 

/**
 * Implements hook_entity_type_alter().
 *
 * @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[]
 */
function pathperdomain_entity_type_alter(array &$entity_types) {
  // Override default pathauto_pattern entity default form class.
  if (!empty($entity_types['pathauto_pattern'])) {
    $entity_types['pathauto_pattern']->setFormClass('default', '\Drupal\pathperdomain\Form\PathPerDomainPatternEditForm');
    $entity_types['pathauto_pattern']->setListBuilderClass('\Drupal\pathperdomain\PathPerDomainPathautoListBuilder');
  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
function pathperdomain_field_widget_info_alter(&$widgets) {
  if (!empty($widgets['path'])) {
    $widgets['path']['class'] = '\Drupal\pathperdomain\PathPerDomainPathautoWidget';
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function pathperdomain_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'field_widget_info_alter') {
    // Move pathperdomain_field_widget_info_alter() to the end of the list.
    $group = $implementations['pathperdomain'];
    unset($implementations['pathperdomain']);
    $implementations['pathperdomain'] = $group;
  }
}

/**
 * Implements hook_form_alter().
 */
function pathperdomain_form_alter(&$form, &$form_state, $form_id) {
  if (($object = $form_state->getFormObject()) && !empty($object)
    && is_callable([$object, 'getEntity']) && ($entity = $object->getEntity())) {
    _pathperdomain_process_entities_edit_form($form, $form_state, $form_id, $entity);
  }
}

/**
 * Helper function for processing entities edit form.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 * @param $entity
 */
function _pathperdomain_process_entities_edit_form(&$form, &$form_state, $form_id, $entity) {
  $pathperdomain_helper = \Drupal::service('pathperdomain.helper');
  $enabled_entity_types = $pathperdomain_helper->getConfiguredEntityTypes();
  if ($enabled_entity_types) {
    $entity_type = $entity->getEntityTypeId();
    $entity_bundle = $entity->bundle();
    $form_id_pattern = $entity_type . '_' . $entity_bundle . '_';
    // exception for user entity edit form
    if ($entity_type == 'user') {
      $form_id_pattern = $entity_type . '_';
    }
    foreach ($enabled_entity_types as $enabled_entity_type) {
      if ($entity_type == $enabled_entity_type && strpos($form_id, $form_id_pattern) !== FALSE) {
        _pathperdomain_attach_entities_common_submit($form);
      }
    }
  }
}

/**
 * Helper function for attach common submit handler to entities edit form.
 *
 * @param $form
 */
function _pathperdomain_attach_entities_common_submit(&$form) {
  if (!empty($form['actions'])) {
    foreach (array_keys($form['actions']) as $action) {
      if (isset($form['actions'][$action]['#submit'])) {
        $form['actions'][$action]['#submit'][] = '_pathperdomain_entity_form_submit';
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function pathperdomain_entity_delete(EntityInterface $entity) {
  _pathperdomain_delete_pathperdomain_entities($entity);
}

/**
 * Implements hook_entity_translation_delete().
 */
function pathperdomain_entity_translation_delete(EntityInterface $translation) {
  _pathperdomain_delete_pathperdomain_entities($translation);
}

/**
 * Helper function for deleting domain path entities.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function _pathperdomain_delete_pathperdomain_entities(EntityInterface $entity) {
  $pathperdomain_loader = \Drupal::service('pathperdomain.loader');
  $properties_map = [
    'entity_type' => $entity->getEntityTypeId(),
    'entity_id' => $entity->id(),
    'language' => $entity->language()->getId(),
  ];
  $pathperdomain_entities = $pathperdomain_loader->loadByProperties($properties_map);

  if ($pathperdomain_entities) {
    foreach ($pathperdomain_entities as $pathperdomain_entity) {
      $pathperdomain_entity->delete();
    }
  }
}

/**
 * Custom submit for entity form.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _pathperdomain_entity_form_submit($form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  $entity_id = $entity->id();
  $langcode = $entity->language()->getId();
  $entity_type = $entity->getEntityTypeId();
  $properties = [
    'entity_id' => $entity_id,
    'language' => $langcode,
    'entity_type' => $entity_type,
  ];

  $path_values = $form_state->getValue('path');
  $pathperdomain_values = isset($path_values[0]['pathperdomain']) ? $path_values[0]['pathperdomain'] : [];

  $pathperdomain_loader = \Drupal::service('pathperdomain.loader');
  $generator = \Drupal::service('pathperdomain.generator');

  // If not set to revert, then save changes.
  if (empty($pathperdomain_values['pathperdomain_delete'])) {
    unset($pathperdomain_values['pathperdomain_delete']);
    foreach ($pathperdomain_values as $domain_id => $alias) {
      $properties['domain_id'] = $domain_id;
      $pathperdomain_entity_data = $pathperdomain_loader->loadByProperties($properties);

      // generate new alias for domain by pathauto
      if (isset($path_values[0]['pathauto']) && $path_values[0]['pathauto'] == 1) {
        $generator->setDomainId($domain_id);
        if (!empty($alias)) {
          $generator->updateEntityAlias($entity, 'update');
          continue;
        }
        else {
          $alias = $generator->createEntityAlias($entity, 'return');
        }
      }

      if (!$alias) {
        if ($pathperdomain_entity_data) {
          $pathperdomain_entity_for_delete = reset($pathperdomain_entity_data);
          $pathperdomain_entity_for_delete->delete();
        }
        continue;
      }

      $properties_map = [
        'alias' => $alias,
        'domain_id' => $domain_id,
        'language' => $langcode,
        'entity_type' => $entity_type,
        'entity_id' => $entity_id,
      ];

      if (!$pathperdomain_entity_data) {
        $pathperdomain_storage = $pathperdomain_loader->getStorage();
        $pathperdomain_entity = $pathperdomain_storage->create(['type' => 'pathperdomain']);
        foreach ($properties_map as $field => $value) {
          $pathperdomain_entity->set($field, $value);
        }
        $pathperdomain_entity->save();
      }
      else {
        $pathperdomain_entity = reset($pathperdomain_entity_data);
        if ($pathperdomain_entity->get('alias')->value != $alias) {
          $pathperdomain_entity->set('alias', $alias);
          $pathperdomain_entity->save();
        }
      }
    }
  }
  else {
    // Delete all domain path aliases.
    $pathperdomain_entities = $pathperdomain_loader->loadByProperties($properties);
    foreach ($pathperdomain_entities as $pathperdomain_entity) {
      $pathperdomain_entity->delete();
    }
  }
}

/**
 * Alter Pathauto-generated aliases before saving.
 *
 */
function pathperdomain_pathauto_alias_alter(&$alias, array &$context) {
  // check if there pathperdomain settings in pattern -
  // change default alias to prevent duplicates in url_alias table
  $pattern = $context['pattern'];
  $domains = $pattern->getThirdPartySetting('pathperdomain', 'domains');
  if (!empty($domains)) {
    // do not generate alias if one of domains checked in settings.
    if (!empty(array_filter($domains))) {
      $alias = '';
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * @param $local_tasks
 */
function pathperdomain_menu_local_tasks_alter(&$local_tasks) {
  $admin_context = \Drupal::service('router.admin_context');
  if ($admin_context->isAdminRoute() && !empty($local_tasks['tabs'][0])) {
    // remove pathperdomain local tasks on admin pages
    foreach ($local_tasks['tabs'][0] as $local_task_id => $local_task) {
      if (strpos($local_task_id, 'pathperdomain.local_tasks') !== FALSE)  {
        unset($local_tasks['tabs'][0][$local_task_id]);
        continue;
      }
    }
  }
}



function pathperdomain_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id){
	$moduleHandler = \Drupal::service('module_handler');
	if ($moduleHandler->moduleExists('mosaic')){ 
		if("mosaic.admin.login" == \Drupal::routeMatch()->getRouteName()){   
			$form['#validate'][] = 'pathperdomain_admin_form_login_validate';

		}
	}
}

function pathperdomain_admin_form_login_validate($form, FormStateInterface &$form_state) { 
	
  if ($form_state->getValue('admin_login_form',false) == 'is_admin_login') { 
	if($form_state->get('uid')){
		$uid				= $form_state->get('uid'); 
		$user				= \Drupal\user\Entity\User::load($uid);   
		$applyFilter		= $user->hasPermission('apply administration domain restriction');  
		
		if($user && $applyFilter){ 
			 $domainElementManager = \Drupal::service("domain.element_manager"); 
			 $domainCurrent		  = \Drupal::service('domain.negotiator')->getActiveDomain(); 
			 $user_domains = $domainElementManager->getFieldValues($user, DOMAIN_ADMIN_FIELD); 
			 if(!isset($user_domains[$domainCurrent->id()])){  
				$form_state->setErrorByName('name',t('You are not allowed to login on this domain.'));
			 } 
		} 
	}
  }     
} 
